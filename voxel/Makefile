# Set up source and destination directories

TARGET  = voxel
BIN_DIR = bin/
OBJ_DIR = obj/
CPP_DIR = src/
HPP_DIR = include/
DOC_DIR = doc/

# Define the default compiler settings

CXX ?= clang++

CXXFLAGS = -O3 -march=native -std=c++11 \
           -Wall -Wextra \
           -D__CL_ENABLE_EXCEPTIONS

LDFLAGS = -lsfml-graphics -lsfml-window -lsfml-system -lX11 -lGL -lGLU -lOpenCL

# Locate relevant source files, headers, and destination .obj's

TMP = $(addprefix $(TMP_DIR),$(TARGET))
BIN = $(addprefix $(BIN_DIR),$(TARGET))
HPP = $(shell find $(HPP_DIR) -name '*.hpp')
CPP = $(shell find $(CPP_DIR) -name '*.cpp')
OBJ = $(subst .cpp,.o,$(subst $(CPP_DIR),$(OBJ_DIR),$(CPP)))

# Compile the target program

default: build

run: build
	$(BIN)

build: $(BIN)

$(BIN): $(OBJ)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(OBJ) -o $(BIN) $(LDFLAGS)

$(OBJ): $(OBJ_DIR)%.o: $(CPP_DIR)%.cpp $(HPP)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -I$(HPP_DIR) -c $< -o $@

# Create and symlink the Doxygen documentation

.PHONY: doc
doc:
	doxygen
	mkdir -p $(DOC_DIR)
	cd $(DOC_DIR); ln -s -f html/index.html $(TARGET).html

# Remove all files generated by the build process

.PHONY: clean_bin
clean_bin:
	rm -rf $(BIN_DIR)

.PHONY: clean_obj
clean_obj:
	rm -rf $(OBJ_DIR)

.PHONY: clean_doc
clean_doc:
	rm -rf $(DOC_DIR)

.PHONY: clean
clean: clean_bin clean_obj clean_doc
	

