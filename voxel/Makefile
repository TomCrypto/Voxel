# Set up source and destination directories

TARGET  = voxel
BIN_DIR = bin/
OBJ_DIR = obj/
CPP_DIR = src/
HPP_DIR = include/
TEST_DIR = test/
TMP_DIR = /tmp/
DEP_DIR = ../
DOC_DIR = doc/

ANALYSIS_DIR = analysis

# Define the default compiler settings

CXX ?= clang++
CXXFLAGS = -O3 -march=native -std=c++11 \
           -Wall -Wextra -Werror \
           -fopenmp

LDFLAGS = -lX11 -lGL -lGLU -fopenmp
TEST_LDFLAGS = -lgtest -pthread

# Locate relevant source files, headers, and destination .obj's

TMP = $(addprefix $(TMP_DIR),$(TARGET))
BIN = $(addprefix $(BIN_DIR),$(TARGET))
HPP = $(shell find $(HPP_DIR) -name '*.hpp')
CPP = $(shell find $(CPP_DIR) -name '*.cpp')
OBJ = $(subst .cpp,.o,$(subst $(CPP_DIR),$(OBJ_DIR),$(CPP)))

TEST_OBJ = $(shell find $(OBJ_DIR) -type f \( -name '*.o' ! -name 'main.o' \))
TEST_CPP = $(shell find $(TEST_DIR) -name '*.cpp')

# Handle specific compilation modes and extensions

ifeq ($(mode), pedantic)
	CXXFLAGS += -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic
endif

# Compile the target program

default: build

run: build
	$(BIN)

# removed precompile for now, it forces a rebuild
build: $(BIN)

$(BIN): $(OBJ)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(OBJ) -o $(BIN) $(LDFLAGS)

$(OBJ): $(OBJ_DIR)%.o: $(CPP_DIR)%.cpp $(HPP)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -I$(HPP_DIR) -I$(DEP_DIR) -c $< -o $@

# Assign defaults to configs

integrator ?= FlatIntegrator

# The precompile pass checks to see if any changes should be made to the compile_settings
# file. If this file must be changed, a recompile is induced.

check_setting = $(shell if test "$(shell sed -n '$(2)P' include/compile_settings.hpp)" != "\#define $(3) $(1);"; then (sed -i "$(2)s/.*/\#define $(3) $(1)/" include/compile_settings.hpp); fi)

.PHONY: precompile
precompile:
	#$(call check_setting,$(integrator),3,"Integrator")

# Run the static analyzer and print the results (clang only)

.PHONY: analyze
analyze: clean_bin clean_obj
	scan-build --use-analyzer $(shell which $(CXX)) -o $(ANALYSIS_DIR) make -j 8

# Compile and run the unit tests on the fly

.PHONY: test
test: $(OBJ) $(HPP)
	$(CXX) $(CXXFLAGS) -I$(HPP_DIR) -I$(DEP_DIR) $(TEST_OBJ) $(TEST_CPP) -o $(TMP) $(LDFLAGS) $(TEST_LDFLAGS)
	-$(TMP) $(ARGS)
	rm $(TMP)

# Create and symlink the Doxygen documentation

.PHONY: doc
doc:
	doxygen
	mkdir -p $(DOC_DIR)
	cd $(DOC_DIR); ln -s -f html/index.html $(TARGET).html

# Remove all files generated by the build process

.PHONY: clean_bin
clean_bin:
	rm -rf $(BIN_DIR)

.PHONY: clean_obj
clean_obj:
	rm -rf $(OBJ_DIR)

.PHONY: clean_doc
clean_doc:
	rm -rf $(DOC_DIR)

.PHONY: clean_analysis
clean_analysis:
	rm -rf $(ANALYSIS_DIR)

.PHONY: clean
clean: clean_bin clean_obj clean_doc clean_analysis
	

