# Set up source and destination directories

TARGET  = voxel
BIN_DIR = bin/
OBJ_DIR = obj/
CPP_DIR = src/
HPP_DIR = include/
DOC_DIR = doc/

# Define some library/header paths if needed. Note: this is probably not needed
# if you are on Linux as the $PATH will contain these by convention, but if you
# are on Windows you may not have (or be able to do) this, so here you have the
# option of specifying hardcoded paths to dynamic libraries and headers.

OPENCL_HDR = #-I"/path/to/OpenCL-1.2/include"
OPENCL_LIB = #-L"/path/to/OpenCL-1.2/lib"

SFML_HDR   = #-I"/path/to/SFML-2.1/include"
SFML_LIB   = #-L"/path/to/SFML-2.1/lib"

ATB_HDR    = #-I"/path/to/AntTweakBar/include"
ATB_LIB    = #-L"/path/to/AntTweakBar/lib"

# If you are on a system with poor (or no) library versioning, you must provide
# the correct name of the library to link to (e.g. 32/64-bit) - we will attempt
# to autodetect it for you, but you may need to override this if it goes wrong.

ifeq ($(OS),Windows_NT)
    GL_LIB_NAME = opengl32
    TEST_ARCH = $(or $(ifeq $(PROCESSOR_ARCHITECTURE),AMD64),\
                     $(ifeq $(PROCESSOR_ARCHITEW6432),AMD64))
    ifeq ($(TEST_ARCH),)
        ATB_LIB_NAME = AntTweakBar64 # This is 64-bit Windows
	else
        ATB_LIB_NAME = AntTweakBar   # This is 32-bit Windows
    endif
else                                 # This is not Windows...
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)          # This is probably Linux
        ATB_LIB_NAME = AntTweakBar
        GL_LIB_NAME = GL
    endif
endif

# Define the default compiler settings

CXX ?= clang++

CXXFLAGS = -O3 -march=native -std=c++11 -Wall -Wextra \
           $(OPENCL_HDR) $(SFML_HDR) $(ATB_HDR)       \
           -D__CL_ENABLE_EXCEPTIONS                   \
           #-DNO_ARGUMENT_LOOKUP

LDFLAGS = -lsfml-graphics -lsfml-window -lsfml-system \
          -lOpenCL -l$(GL_LIB_NAME) -l$(ATB_LIB_NAME) \
          $(OPENCL_LIB) $(SFML_LIB) $(ATB_LIB)

# Locate relevant source files, headers, and destination .obj's

TMP = $(addprefix $(TMP_DIR),$(TARGET))
BIN = $(addprefix $(BIN_DIR),$(TARGET))
HPP = $(shell find $(HPP_DIR) -name '*.hpp')
CPP = $(shell find $(CPP_DIR) -name '*.cpp')
OBJ = $(subst .cpp,.o,$(subst $(CPP_DIR),$(OBJ_DIR),$(CPP)))

# Compile the target program

default: build

run: build
	$(BIN)

build: $(BIN)

$(BIN): $(OBJ)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(OBJ) -o $(BIN) $(LDFLAGS)

$(OBJ): $(OBJ_DIR)%.o: $(CPP_DIR)%.cpp $(HPP)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -I$(HPP_DIR) -c $< -o $@

# Create and symlink the Doxygen documentation

.PHONY: doc
doc:
	doxygen
	mkdir -p $(DOC_DIR)
	cd $(DOC_DIR); ln -s -f html/index.html $(TARGET).html

# Remove all files generated by the build process

.PHONY: clean_bin
clean_bin:
	rm -rf $(BIN_DIR)

.PHONY: clean_obj
clean_obj:
	rm -rf $(OBJ_DIR)

.PHONY: clean_doc
clean_doc:
	rm -rf $(DOC_DIR)

.PHONY: clean
clean: clean_bin clean_obj clean_doc
